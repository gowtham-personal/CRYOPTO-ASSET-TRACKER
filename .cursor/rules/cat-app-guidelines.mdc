---
description: 
globs: 
alwaysApply: false
---
Imports:
  - @.cursor/rules/general-guidelines.mdc
  - @.cursor/rules/best-practices.mdc

## 1. Context & Directory Map
Base path: src/

├─ `app/`
│   ├─ `<module>/page.tsx` (UI pages)
│   └─ `api/<module>/route.ts` (API)
├─ `components/`
│   ├─ `shadcn/ui/` (read-only primitives) 
│   └─ `bricks/` (custom wrappers & new components)
├─ `constants/<module>/`
├─ `services/<module>/`
├─ `interface/<module>/`
├─ `store/<modulr>/`
├─ `utils/`
└─ `test-utils/`

### 1.1 Module Routing
- **Module** (required): single word (e.g. `dashboard`).
- If missing, ask: “Which module should I target?”
- Then place files under corresponding subfolder (create if absent).

## 4. Inputs
1. **Module**
2. **Figma Links** (numbered list): All links are source of truth.
3. **Optional**: Data shapes, Data sources, API details, behavior notes.

## 5. Core Guidelines

### 5.1 Shadcn UI
- Always search src/components/shadcn/ui first.
- Never modify upstream Shadcn files—wrap, create a wrapper for the component in src/components/bricks

### 5.2 File Conventions for New Bricks
Every new component in `src/components/bricks/<module>/` or src/components/bricks/common/ should be generated by the command script `yarn create:component`
Every new component in `src/components/bricks/<module>/` or src/components/bricks/common/ must include, above script will generate these files:
- `<Name>.tsx` (React component)
- `<Name>.test.tsx` (Jest + React Testing Library)
- `<Name>.stories.tsx` (Storybook)


### 5.2.1 Page & Component Creation
- Always prefer existing components from src/components/bricks whenever possible.
- Keep page-level components minimal: focus on layout and composition, not detailed UI logic.
- Adhere to atomic design: pages should assemble molecules and organisms, not individual atoms.
- Place page-specific CSS in src/app/globals.css or a dedicated stylesheet; do not inline large style blocks.
- Do not duplicate logic—reuse shared utilities, hooks, or components instead of reimplementing.

### 5.3 Pages & API
- **Pages**: use App Router (`app/<module>/page.tsx`), server components by default, add `'use client'` only when needed.
- **API**: `app/api/<module>/route.ts`, follow Next.js App Router conventions.

### 5.4 Constants, Services & Types
- Constants: `src/constants/<module>/…`
- Services: `src/services/<module>/…`
- Interfaces: `src/interfaces/<module>/…`

## 6. UI/UX Implementation
- Pixel-perfect per **all** Figma links.
- Replicate layout, styling, hover/interaction states exactly.
- Provide a **Confidence Score** (High/Medium/Low) for Figma-to-code fidelity.
- Use "Icon component with Lucide-react Icons", instead of downloading svg.
- Always look for global.css for styles and reuse in the code, create if not available.

## 7. Output Format
1. **Confidence Score:** High/Medium/Low + brief rationale.
2. **Notes & Assumptions:** Data shapes, any design ambiguities.
3. **Code Artifacts:** Component + test + story, with minimal commentary.

## 8. Example Invocation
```plaintext
@rules [best-practices.mdc](mdc:.cursor/rules/best-practices.mdc)
@cat-guidelines.mdc

Module: coins

Figma Links:
1. Overall Card Layout - @https://figma.com/…
2. Hover State Details - @https://figma.com/…

Generate the SourcingCard component.
```
```

> **Use this rule for every prompt that begins with `@cat-app-guidelines.mdc`.**
